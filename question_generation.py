from ingest import read_repo_data, chunk_documents, index_data
from pydantic_ai import Agent
from pydantic import BaseModel
import json
import random
from search_agent import init_agent
from logs import log_interaction_to_file
from tqdm import tqdm
import argparse
import asyncio


question_generation_prompt = """
You are helping to create test questions for an AI agent that answers questions about the Elastic Search GitHub repository. 
Elastic Search is a distributed search and analytics engine that stores and retrieves structured, unstructured, and vector data in real-time.

Based on the provided content of the Elastic Search repository, generate realistic questions that AI engineers and developers might ask.

The questions should:

- Be natural and varied in style
- Range from simple to complex
- Include both specific technical questions and general course questions

Generate one question for each record.
""".strip()

class QuestionsList(BaseModel):
    questions: list[str]

question_generator = Agent(
    name="question_generator",
    instructions=question_generation_prompt,
    model='gpt-4o-mini',
    output_type=QuestionsList
)

def generate_prompt(repo_owner:str, repo_name:str, num_of_questions:int):
    dat = read_repo_data(repo_owner=repo_owner, repo_name=repo_name)
    chunk_docs = chunk_documents(docs=dat)

    sample = random.sample(chunk_docs,num_of_questions)
    prompt_docs = [d['content'] for d in sample]
    prompt = json.dumps(prompt_docs)

    return prompt

async def generate_questions(repo_owner:str, repo_name:str, num_of_questions:int):
    prompt = generate_prompt(repo_owner=repo_owner, repo_name=repo_name, num_of_questions=num_of_questions)
    result = await question_generator.run(prompt)
    return result.output.questions


def create_eval_agent(repo_owner:str, repo_name:str, agent_name:str):
    index = index_data(repo_owner=repo_owner, repo_name=repo_name)
    agent = init_agent(index=index, repo_owner=repo_owner, repo_name=
                       repo_name, agent_name=agent_name)
    return agent


def log_agent_responses(repo_owner:str, repo_name:str, agent_name:str, num_of_questions:int):
    
    agent = create_eval_agent(repo_owner=repo_owner, repo_name=repo_name, agent_name=agent_name)
    questions = asyncio.run(generate_questions(repo_owner=repo_owner, repo_name=repo_name, 
                                         num_of_questions=num_of_questions)) 
    
    for q in tqdm(questions):
        print(q)

        result = asyncio.run(agent.run(user_prompt=q)) 
        print(result.output)

        log_interaction_to_file(
            agent,
            result.new_messages(),
            source='ai-generated'
        )
        print()    


def main(params):
    repo_owner = params.repo_owner
    repo_name = params.repo_name
    agent_name = params.agent_name
    num_of_questions = params.num_of_questions

    log_agent_responses(repo_owner=repo_owner, repo_name=repo_name, 
                        agent_name=agent_name, num_of_questions=num_of_questions)




if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Agent will generated a desired number of questions based on a random sample of chunks.')
    parser.add_argument('--repo_owner', help='user id of repository owner')
    parser.add_argument('--repo_name', help='name of repository')
    parser.add_argument('--agent_name', help='Desired name for agent')
    parser.add_argument('--num_of_questions', type=int, help='Number of questions to be generated by the agent')

    args = parser.parse_args()

    if args.num_of_questions <= 0:
        raise SystemExit("Error: --num_of_questions must be a positive integer")

    main(args)
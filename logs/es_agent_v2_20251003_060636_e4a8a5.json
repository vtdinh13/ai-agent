{
  "agent_name": "es_agent_v2",
  "system_prompt": "You are a helpful assistant that answers questions about documentation.  \n\nUse the search tool to find relevant information from the repository before answering questions.  \n\nIf you can find specific information through search, use it to provide accurate answers.\n\nAlways include references by citing the filename of the source material you used.\nReplace it with the full path to the GitHub repository:\n\"https://github.com/elastic/elasticsearch/blob/main/\"\nFormat: [LINK TITLE](FULL_GITHUB_LINK)\n\n\nIf the search doesn't return relevant results, let the user know and provide general guidance.",
  "provider": "openai",
  "model": "gpt-4o-mini",
  "tools": [
    "search"
  ],
  "messages": [
    {
      "parts": [
        {
          "content": "Can you explain how to create a custom analyzer in Elastic Search for the Hungarian language?",
          "timestamp": "2025-10-03T06:06:33.682654+00:00",
          "part_kind": "user-prompt"
        }
      ],
      "instructions": "You are a helpful assistant that answers questions about documentation.  \n\nUse the search tool to find relevant information from the repository before answering questions.  \n\nIf you can find specific information through search, use it to provide accurate answers.\n\nAlways include references by citing the filename of the source material you used.\nReplace it with the full path to the GitHub repository:\n\"https://github.com/elastic/elasticsearch/blob/main/\"\nFormat: [LINK TITLE](FULL_GITHUB_LINK)\n\n\nIf the search doesn't return relevant results, let the user know and provide general guidance.",
      "kind": "request"
    },
    {
      "parts": [
        {
          "tool_name": "search",
          "args": "{\"query\":\"custom analyzer Hungarian language\"}",
          "tool_call_id": "call_ktFmqgdRAYJv6TujJBtngomg",
          "part_kind": "tool-call"
        }
      ],
      "usage": {
        "input_tokens": 218,
        "cache_write_tokens": 0,
        "cache_read_tokens": 0,
        "output_tokens": 16,
        "input_audio_tokens": 0,
        "cache_audio_read_tokens": 0,
        "output_audio_tokens": 0,
        "details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 0,
          "rejected_prediction_tokens": 0
        }
      },
      "model_name": "gpt-4o-mini-2024-07-18",
      "timestamp": "2025-10-03T06:06:34+00:00",
      "kind": "response",
      "provider_name": "openai",
      "provider_details": {
        "finish_reason": "tool_calls"
      },
      "provider_response_id": "chatcmpl-CMTE2R0tIWmZ6uXobij0k1Oh5tVIu",
      "finish_reason": "tool_call"
    },
    {
      "parts": [
        {
          "tool_name": "search",
          "content": [
            {
              "navigation_title": "Language",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html"
              ],
              "content": "# Language analyzers [analysis-lang-analyzer]\n\n\nA set of analyzers aimed at analyzing specific language text. The following types are supported: [`arabic`](#arabic-analyzer), [`armenian`](#armenian-analyzer), [`basque`](#basque-analyzer), [`bengali`](#bengali-analyzer), [`brazilian`](#brazilian-analyzer), [`bulgarian`](#bulgarian-analyzer), [`catalan`](#catalan-analyzer), [`cjk`](#cjk-analyzer), [`czech`](#czech-analyzer), [`danish`](#danish-analyzer), [`dutch`](#dutch-analyzer), [`english`](#english-analyzer), [`estonian`](#estonian-analyzer), [`finnish`](#finnish-analyzer), [`french`](#french-analyzer), [`galician`](#galician-analyzer), [`german`](#german-analyzer), [`greek`](#greek-analyzer), [`hindi`](#hindi-analyzer), [`hungarian`](#hungarian-analyzer), [`indonesian`](#indonesian-analyzer), [`irish`](#irish-analyzer), [`italian`](#italian-analyzer), [`latvian`](#latvian-analyzer), [`lithuanian`](#lithuanian-analyzer), [`norwegian`](#norwegian-analyzer), [`persian`](#persian-analyzer), [`portuguese`](#portuguese-analyzer), [`romanian`](#romanian-analyzer), [`russian`](#russian-analyzer), [`serbian`](#serbian-analyzer), [`sorani`](#sorani-analyzer), [`spanish`](#spanish-analyzer), [`swedish`](#swedish-analyzer), [`turkish`](#turkish-analyzer), [`thai`](#thai-analyzer).\n\n## Configuring language analyzers [_configuring_language_analyzers]\n\n### Stopwords [_stopwords]\n\nAll analyzers support setting custom `stopwords` either internally in the config, or by using an external stopwords file by setting `stopwords_path`. Check [Stop Analyzer](/reference/text-analysis/analysis-stop-analyzer.md) for more details.\n\n\n### Excluding words from stemming [_excluding_words_from_stemming]\n\nThe `stem_exclusion` parameter allows you to specify an array of lowercase words that should not be stemmed. Internally, this functionality is implemented by adding the [`keyword_marker` token filter](/reference/text-analysis/analysis-keyword-marker-tokenfilter.md) with the `keywords` set to the value of the `stem_exclusion` parameter.\n\nThe following analyzers support setting custom `stem_exclusion` list: `arabic`, `armenian`, `basque`, `bengali`, `bulgarian`, `catalan`, `czech`, `dutch`, `english`, `finnish`, `french`, `galician`, `german`, `hindi`, `hungarian`, `indonesian`, `irish`, `italian`, `latvian`, `lithuanian`, `norwegian`, `portuguese`, `romanian`, `russian`, `serbian`, `sorani`, `spanish`, `swedish`, `turkish`.\n\n\n\n## Reimplementing language analyzers [_reimplementing_language_analyzers]\n\nThe built-in language analyzers can be reimplemented as `custom` analyzers (as described below) in order to customize their behaviour.\n\n::::{note}\nIf you do not intend to exclude words from being stemmed (the equivalent of the `stem_exclusion` parameter above), then you should remove the `keyword_marker` token filter from the custom analyzer configuration.\n::::\n\n\n### `arabic` analyzer [arabic-analyzer]\n\nThe `arabic` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /arabic_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"arabic_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_arabic_\" <1>\n        },\n        \"arabic_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0645\u062b\u0627\u0644\"] <2>\n        },\n        \"arabic_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"arabic\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_arabic\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_stop\",\n            \"arabic_normalization\",\n            \"arabic_keywords\",\n            \"arabic_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `armenian` analyzer [armenian-analyzer]\n\nThe `armenian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /armenian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"armenian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_armenian_\" <1>\n        },\n        \"armenian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0585\u0580\u056b\u0576\u0561\u056f\"] <2>\n        },\n        \"armenian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"armenian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_armenian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"armenian_stop\",\n            \"armenian_keywords\",\n            \"armenian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `basque` analyzer [basque-analyzer]\n\nThe `basque` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /basque_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"basque_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_basque_\" <1>\n        },\n        \"basque_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Adibidez\"] <2>\n        },\n        \"basque_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"basque\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_basque\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"basque_stop\",\n            \"basque_keywords\",\n            \"basque_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `bengali` analyzer [bengali-analyzer]\n\nThe `bengali` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /bengali_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"bengali_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_bengali_\" <1>\n        },\n        \"bengali_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0989\u09a6\u09be\u09b9\u09b0\u09a3\"] <2>\n        },\n        \"bengali_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"bengali\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_bengali\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"bengali_keywords\",\n            \"indic_normalization\",\n            \"bengali_normalization\",\n            \"bengali_stop\",\n            \"bengali_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `brazilian` analyzer [brazilian-analyzer]\n\nThe `brazilian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /brazilian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"brazilian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_brazilian_\" <1>\n        },\n        \"brazilian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"brazilian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"brazilian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_brazilian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"brazilian_stop\",\n            \"brazilian_keywords\",\n            \"brazilian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `bulgarian` analyzer [bulgarian-analyzer]\n\nThe `bulgarian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /bulgarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"bulgarian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_bulgarian_\" <1>\n        },\n        \"bulgarian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u043f\u0440\u0438\u043c\u0435\u0440\"] <2>\n        },\n        \"bulgarian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"bulgarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_bulgarian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"bulgarian_stop\",\n            \"bulgarian_keywords\",\n            \"bulgarian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `catalan` analyzer [catalan-analyzer]\n\nThe `catalan` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /catalan_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"catalan_elision\": {\n          \"type\":       \"elision\",\n          \"articles\":   [ \"d\", \"l\", \"m\", \"n\", \"s\", \"t\"],\n          \"articles_case\": true\n        },\n        \"catalan_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_catalan_\" <1>\n        },\n        \"catalan_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"example\"] <2>\n        },\n        \"catalan_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"catalan\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_catalan\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"catalan_elision\",\n            \"lowercase\",\n            \"catalan_stop\",\n            \"catalan_keywords\",\n            \"catalan_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `cjk` analyzer [cjk-analyzer]\n\n::::{note}\nYou may find that `icu_analyzer` in the ICU analysis plugin works better for CJK text than the `cjk` analyzer. Experiment with your text and queries.\n::::\n\n\nThe `cjk` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /cjk_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  [ <1>\n            \"a\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\", \"for\",\n            \"if\", \"in\", \"into\", \"is\", \"it\", \"no\", \"not\", \"of\", \"on\",\n            \"or\", \"s\", \"such\", \"t\", \"that\", \"the\", \"their\", \"then\",\n            \"there\", \"these\", \"they\", \"this\", \"to\", \"was\", \"will\",\n            \"with\", \"www\"\n          ]\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_cjk\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"cjk_width\",\n            \"lowercase\",\n            \"cjk_bigram\",\n            \"english_stop\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters. The default stop words are **almost** the same as the `_english_` set, but not exactly the same.\n\n\n\n### `czech` analyzer [czech-analyzer]\n\nThe `czech` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /czech_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"czech_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_czech_\" <1>\n        },\n        \"czech_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"p\u0159\u00edklad\"] <2>\n        },\n        \"czech_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"czech\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_czech\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"czech_stop\",\n            \"czech_keywords\",\n            \"czech_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `danish` analyzer [danish-analyzer]\n\nThe `danish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /danish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"danish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_danish_\" <1>\n        },\n        \"danish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"eksempel\"] <2>\n        },\n        \"danish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"danish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_danish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"danish_stop\",\n            \"danish_keywords\",\n            \"danish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `dutch` analyzer [dutch-analyzer]\n\nThe `dutch` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /dutch_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"dutch_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_dutch_\" <1>\n        },\n        \"dutch_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"voorbeeld\"] <2>\n        },\n        \"dutch_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"dutch\"\n        },\n        \"dutch_override\": {\n          \"type\":       \"stemmer_override\",\n          \"rules\": [\n            \"fiets=>fiets\",\n            \"bromfiets=>bromfiets\",\n            \"ei=>eier\",\n            \"kind=>kinder\"\n          ]\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_dutch\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"dutch_stop\",\n            \"dutch_keywords\",\n            \"dutch_override\",\n            \"dutch_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `english` analyzer [english-analyzer]\n\nThe `english` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /english_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_english_\" <1>\n        },\n        \"english_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"example\"] <2>\n        },\n        \"english_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"english\"\n        },\n        \"english_possessive_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"possessive_english\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_english\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"english_possessive_stemmer\",\n            \"lowercase\",\n            \"english_stop\",\n            \"english_keywords\",\n            \"english_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `estonian` analyzer [estonian-analyzer]\n\nThe `estonian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /estonian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"estonian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_estonian_\" <1>\n        },\n        \"estonian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"n\u00e4ide\"] <2>\n        },\n        \"estonian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"estonian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_estonian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"estonian_stop\",\n            \"estonian_keywords\",\n            \"estonian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `finnish` analyzer [finnish-analyzer]\n\nThe `finnish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /finnish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"finnish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_finnish_\" <1>\n        },\n        \"finnish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"esimerkki\"] <2>\n        },\n        \"finnish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"finnish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_finnish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"finnish_stop\",\n            \"finnish_keywords\",\n            \"finnish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `french` analyzer [french-analyzer]\n\nThe `french` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /french_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"french_elision\": {\n          \"type\":         \"elision\",\n          \"articles_case\": true,\n          \"articles\": [\n              \"l\", \"m\", \"t\", \"qu\", \"n\", \"s\",\n              \"j\", \"d\", \"c\", \"jusqu\", \"quoiqu\",\n              \"lorsqu\", \"puisqu\"\n            ]\n        },\n        \"french_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_french_\" <1>\n        },\n        \"french_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Example\"] <2>\n        },\n        \"french_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_french\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_french\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"french_elision\",\n            \"lowercase\",\n            \"french_stop\",\n            \"french_keywords\",\n            \"french_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `galician` analyzer [galician-analyzer]\n\nThe `galician` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /galician_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"galician_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_galician_\" <1>\n        },\n        \"galician_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"galician_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"galician\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_galician\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"galician_stop\",\n            \"galician_keywords\",\n            \"galician_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `german` analyzer [german-analyzer]\n\nThe `german` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /german_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"german_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_german_\" <1>\n        },\n        \"german_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Beispiel\"] <2>\n        },\n        \"german_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_german\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_german\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"german_stop\",\n            \"german_keywords\",\n            \"german_normalization\",\n            \"german_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `greek` analyzer [greek-analyzer]\n\nThe `greek` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /greek_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"greek_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_greek_\" <1>\n        },\n        \"greek_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"greek\"\n        },\n        \"greek_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1\"] <2>\n        },\n        \"greek_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"greek\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_greek\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"greek_lowercase\",\n            \"greek_stop\",\n            \"greek_keywords\",\n            \"greek_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `hindi` analyzer [hindi-analyzer]\n\nThe `hindi` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /hindi_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hindi_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_hindi_\" <1>\n        },\n        \"hindi_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0909\u0926\u093e\u0939\u0930\u0923\"] <2>\n        },\n        \"hindi_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"hindi\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hindi\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"hindi_keywords\",\n            \"indic_normalization\",\n            \"hindi_normalization\",\n            \"hindi_stop\",\n            \"hindi_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `hungarian` analyzer [hungarian-analyzer]\n\nThe `hungarian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /hungarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hungarian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_hungarian_\" <1>\n        },\n        \"hungarian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"p\u00e9lda\"] <2>\n        },\n        \"hungarian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"hungarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hungarian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"hungarian_stop\",\n            \"hungarian_keywords\",\n            \"hungarian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `indonesian` analyzer [indonesian-analyzer]\n\nThe `indonesian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /indonesian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"indonesian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_indonesian_\" <1>\n        },\n        \"indonesian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"contoh\"] <2>\n        },\n        \"indonesian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"indonesian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_indonesian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"indonesian_stop\",\n            \"indonesian_keywords\",\n            \"indonesian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `irish` analyzer [irish-analyzer]\n\nThe `irish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /irish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"irish_hyphenation\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  [ \"h\", \"n\", \"t\" ],\n          \"ignore_case\": true\n        },\n        \"irish_elision\": {\n          \"type\":       \"elision\",\n          \"articles\":   [ \"d\", \"m\", \"b\" ],\n          \"articles_case\": true\n        },\n        \"irish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_irish_\" <1>\n        },\n        \"irish_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"irish\"\n        },\n        \"irish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"sampla\"] <2>\n        },\n        \"irish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"irish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_irish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"irish_hyphenation\",\n            \"irish_elision\",\n            \"irish_lowercase\",\n            \"irish_stop\",\n            \"irish_keywords\",\n            \"irish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `italian` analyzer [italian-analyzer]\n\nThe `italian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /italian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"italian_elision\": {\n          \"type\": \"elision\",\n          \"articles\": [\n                \"c\", \"l\", \"all\", \"dall\", \"dell\",\n                \"nell\", \"sull\", \"coll\", \"pell\",\n                \"gl\", \"agl\", \"dagl\", \"degl\", \"negl\",\n                \"sugl\", \"un\", \"m\", \"t\", \"s\", \"v\", \"d\"\n          ],\n          \"articles_case\": true\n        },\n        \"italian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_italian_\" <1>\n        },\n        \"italian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"esempio\"] <2>\n        },\n        \"italian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_italian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_italian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"italian_elision\",\n            \"lowercase\",\n            \"italian_stop\",\n            \"italian_keywords\",\n            \"italian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `latvian` analyzer [latvian-analyzer]\n\nThe `latvian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /latvian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"latvian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_latvian_\" <1>\n        },\n        \"latvian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"piem\u0113rs\"] <2>\n        },\n        \"latvian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"latvian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_latvian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"latvian_stop\",\n            \"latvian_keywords\",\n            \"latvian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `lithuanian` analyzer [lithuanian-analyzer]\n\nThe `lithuanian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /lithuanian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"lithuanian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_lithuanian_\" <1>\n        },\n        \"lithuanian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"pavyzdys\"] <2>\n        },\n        \"lithuanian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"lithuanian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_lithuanian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"lithuanian_stop\",\n            \"lithuanian_keywords\",\n            \"lithuanian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `norwegian` analyzer [norwegian-analyzer]\n\nThe `norwegian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /norwegian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"norwegian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_norwegian_\" <1>\n        },\n        \"norwegian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"eksempel\"] <2>\n        },\n        \"norwegian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"norwegian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_norwegian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"norwegian_stop\",\n            \"norwegian_keywords\",\n            \"norwegian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `persian` analyzer [persian-analyzer]\n\nThe `persian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /persian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"char_filter\": {\n        \"zero_width_spaces\": {\n            \"type\":       \"mapping\",\n            \"mappings\": [ \"\\\\u200C=>\\\\u0020\"] <1>\n        }\n      },\n      \"filter\": {\n        \"persian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_persian_\" <2>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_persian\": {\n          \"tokenizer\":     \"standard\",\n          \"char_filter\": [ \"zero_width_spaces\" ],\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_normalization\",\n            \"persian_normalization\",\n            \"persian_stop\",\n            \"persian_stem\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. Replaces zero-width non-joiners with an ASCII space.\n2. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n\n\n\n### `portuguese` analyzer [portuguese-analyzer]\n\nThe `portuguese` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /portuguese_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"portuguese_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_portuguese_\" <1>\n        },\n        \"portuguese_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"portuguese_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_portuguese\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_portuguese\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"portuguese_stop\",\n            \"portuguese_keywords\",\n            \"portuguese_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `romanian` analyzer [romanian-analyzer]\n\nThe `romanian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /romanian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"romanian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_romanian_\" <1>\n        },\n        \"romanian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplu\"] <2>\n        },\n        \"romanian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"romanian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_romanian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"romanian_stop\",\n            \"romanian_keywords\",\n            \"romanian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `russian` analyzer [russian-analyzer]\n\nThe `russian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /russian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"russian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_russian_\" <1>\n        },\n        \"russian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u043f\u0440\u0438\u043c\u0435\u0440\"] <2>\n        },\n        \"russian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"russian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_russian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"russian_stop\",\n            \"russian_keywords\",\n            \"russian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `serbian` analyzer [serbian-analyzer]\n\nThe `serbian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /serbian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"serbian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_serbian_\" <1>\n        },\n        \"serbian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u043f\u0440\u0438\u043c\u0435\u0440\"] <2>\n        },\n        \"serbian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"serbian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_serbian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"serbian_stop\",\n            \"serbian_keywords\",\n            \"serbian_stemmer\",\n            \"serbian_normalization\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `sorani` analyzer [sorani-analyzer]\n\nThe `sorani` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /sorani_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"sorani_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_sorani_\" <1>\n        },\n        \"sorani_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"m\u00eenak\"] <2>\n        },\n        \"sorani_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"sorani\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_sorani\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"sorani_normalization\",\n            \"lowercase\",\n            \"decimal_digit\",\n            \"sorani_stop\",\n            \"sorani_keywords\",\n            \"sorani_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `spanish` analyzer [spanish-analyzer]\n\nThe `spanish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /spanish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"spanish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_spanish_\" <1>\n        },\n        \"spanish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"ejemplo\"] <2>\n        },\n        \"spanish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_spanish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_spanish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"spanish_stop\",\n            \"spanish_keywords\",\n            \"spanish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `swedish` analyzer [swedish-analyzer]\n\nThe `swedish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /swedish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"swedish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_swedish_\" <1>\n        },\n        \"swedish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exempel\"] <2>\n        },\n        \"swedish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"swedish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_swedish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"swedish_stop\",\n            \"swedish_keywords\",\n            \"swedish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `turkish` analyzer [turkish-analyzer]\n\nThe `turkish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /turkish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"turkish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_turkish_\" <1>\n        },\n        \"turkish_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"turkish\"\n        },\n        \"turkish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u00f6rnek\"] <2>\n        },\n        \"turkish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"turkish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_turkish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"apostrophe\",\n            \"turkish_lowercase\",\n            \"turkish_stop\",\n            \"turkish_keywords\",\n            \"turkish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.\n2. This filter should be removed unless there are words which should be excluded from stemming.\n\n\n\n### `thai` analyzer [thai-analyzer]\n\nThe `thai` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n```console\nPUT /thai_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"thai_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_thai_\" <1>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_thai\": {\n          \"tokenizer\":  \"thai\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"thai_stop\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. The default stopwords can be overridden with the `stopwords` or `stopwords_path` parameters.",
              "filename": "elasticsearch-main/docs/reference/text-analysis/analysis-lang-analyzer.md"
            },
            {
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis.html"
              ],
              "content": "# Analysis plugins [analysis]\n\nAnalysis plugins extend Elasticsearch by adding new analyzers, tokenizers, token filters, or character filters to Elasticsearch.\n\n\n## Core analysis plugins [_core_analysis_plugins]\n\nThe core analysis plugins are:\n\n[ICU](/reference/elasticsearch-plugins/analysis-icu.md)\n:   Adds extended Unicode support using the [ICU](http://site.icu-project.org/) libraries, including better analysis of Asian languages, Unicode normalization, Unicode-aware case folding, collation support, and transliteration.\n\n[Kuromoji](/reference/elasticsearch-plugins/analysis-kuromoji.md)\n:   Advanced analysis of Japanese using the [Kuromoji analyzer](https://www.atilika.org/).\n\n[Nori](/reference/elasticsearch-plugins/analysis-nori.md)\n:   Morphological analysis of Korean using the Lucene Nori analyzer.\n\n[Phonetic](/reference/elasticsearch-plugins/analysis-phonetic.md)\n:   Analyzes tokens into their phonetic equivalent using Soundex, Metaphone, Caverphone, and other codecs.\n\n[SmartCN](/reference/elasticsearch-plugins/analysis-smartcn.md)\n:   An analyzer for Chinese or mixed Chinese-English text. This analyzer uses probabilistic knowledge to find the optimal word segmentation for Simplified Chinese text. The text is first broken into sentences, then each sentence is segmented into words.\n\n[Stempel](/reference/elasticsearch-plugins/analysis-stempel.md)\n:   Provides high quality stemming for Polish.\n\n[Ukrainian](/reference/elasticsearch-plugins/analysis-ukrainian.md)\n:   Provides stemming for Ukrainian.\n\n\n## Community contributed analysis plugins [_community_contributed_analysis_plugins]\n\nA number of analysis plugins have been contributed by our community:\n\n* [IK Analysis Plugin](https://github.com/medcl/elasticsearch-analysis-ik) (by Medcl)\n* [Pinyin Analysis Plugin](https://github.com/medcl/elasticsearch-analysis-pinyin) (by Medcl)\n* [Vietnamese Analysis Plugin](https://github.com/duydo/elasticsearch-analysis-vietnamese) (by Duy Do)\n* [STConvert Analysis Plugin](https://github.com/medcl/elasticsearch-analysis-stconvert) (by Medcl)",
              "filename": "elasticsearch-main/docs/reference/elasticsearch-plugins/analysis-plugins.md"
            },
            {
              "navigation_title": "Normalization",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-normalization-tokenfilter.html"
              ],
              "content": "# Normalization token filters [analysis-normalization-tokenfilter]\n\n\nThere are several token filters available which try to normalize special characters of a certain language.\n\nArabic\n:   [`arabic_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.html)\n\nGerman\n:   [`german_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/de/GermanNormalizationFilter.html)\n\nHindi\n:   [`hindi_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/hi/HindiNormalizationFilter.html)\n\nIndic\n:   [`indic_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/in/IndicNormalizationFilter.html)\n\nKurdish (Sorani)\n:   [`sorani_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.html)\n\nPersian\n:   [`persian_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/fa/PersianNormalizationFilter.html)\n\nScandinavian\n:   [`scandinavian_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizer.html), [`scandinavian_folding`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.html)\n\nSerbian\n:   [`serbian_normalization`](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/sr/SerbianNormalizationFilter.html)",
              "filename": "elasticsearch-main/docs/reference/text-analysis/analysis-normalization-tokenfilter.md"
            },
            {
              "applies_to": {
                "stack": "all",
                "serverless": "all"
              },
              "content": "# Query languages\n\nThis section contains reference information for Elastic query languages, including:\n\n* [Query DSL](querydsl.md)\n* [ES|QL](esql.md)\n* [SQL](sql.md)\n* [EQL](eql.md)\n* [KQL](kql.md)\n\nFor more information about each language, refer to the [Explore and analyze](docs-content://explore-analyze/query-filter/languages.md) section.",
              "filename": "elasticsearch-main/docs/reference/query-languages/index.md"
            },
            {
              "navigation_title": "Standard",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html"
              ],
              "content": "# Standard analyzer [analysis-standard-analyzer]\n\n\nThe `standard` analyzer is the default analyzer which is used if none is specified. It provides grammar based tokenization (based on the Unicode Text Segmentation algorithm, as specified in [Unicode Standard Annex #29](https://unicode.org/reports/tr29/)) and works well for most languages.\n\n\n## Example output [_example_output_4]\n\n```console\nPOST _analyze\n{\n  \"analyzer\": \"standard\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}\n```\n\nThe above sentence would produce the following terms:\n\n```text\n[ the, 2, quick, brown, foxes, jumped, over, the, lazy, dog's, bone ]\n```\n\n\n## Configuration [_configuration_5]\n\nThe `standard` analyzer accepts the following parameters:\n\n`max_token_length`\n:   The maximum token length. If a token is seen that exceeds this length then it is split at `max_token_length` intervals. Defaults to `255`.\n\n`stopwords`\n:   A pre-defined stop words list like `_english_` or an array containing a list of stop words. Defaults to `_none_`.\n\n`stopwords_path`\n:   The path to a file containing stop words.\n\nSee the [Stop Token Filter](/reference/text-analysis/analysis-stop-tokenfilter.md) for more information about stop word configuration.\n\n\n## Example configuration [_example_configuration_4]\n\nIn this example, we configure the `standard` analyzer to have a `max_token_length` of 5 (for demonstration purposes), and to use the pre-defined list of English stop words:\n\n```console\nPUT my-index-000001\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_english_analyzer\": {\n          \"type\": \"standard\",\n          \"max_token_length\": 5,\n          \"stopwords\": \"_english_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my-index-000001/_analyze\n{\n  \"analyzer\": \"my_english_analyzer\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}\n```\n\nThe above example produces the following terms:\n\n```text\n[ 2, quick, brown, foxes, jumpe, d, over, lazy, dog's, bone ]\n```\n\n\n## Definition [_definition_4]\n\nThe `standard` analyzer consists of:\n\nTokenizer\n:   * [Standard Tokenizer](/reference/text-analysis/analysis-standard-tokenizer.md)\n\n\nToken Filters\n:   * [Lower Case Token Filter](/reference/text-analysis/analysis-lowercase-tokenfilter.md)\n* [Stop Token Filter](/reference/text-analysis/analysis-stop-tokenfilter.md) (disabled by default)\n\n\nIf you need to customize the `standard` analyzer beyond the configuration parameters then you need to recreate it as a `custom` analyzer and modify it, usually by adding token filters. This would recreate the built-in `standard` analyzer and you can use it as a starting point:\n\n```console\nPUT /standard_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_standard\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\"       <1>\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n1. You\u2019d add any token filters after `lowercase`.",
              "filename": "elasticsearch-main/docs/reference/text-analysis/analysis-standard-analyzer.md"
            }
          ],
          "tool_call_id": "call_ktFmqgdRAYJv6TujJBtngomg",
          "metadata": null,
          "timestamp": "2025-10-03T06:06:35.573287+00:00",
          "part_kind": "tool-return"
        }
      ],
      "instructions": "You are a helpful assistant that answers questions about documentation.  \n\nUse the search tool to find relevant information from the repository before answering questions.  \n\nIf you can find specific information through search, use it to provide accurate answers.\n\nAlways include references by citing the filename of the source material you used.\nReplace it with the full path to the GitHub repository:\n\"https://github.com/elastic/elasticsearch/blob/main/\"\nFormat: [LINK TITLE](FULL_GITHUB_LINK)\n\n\nIf the search doesn't return relevant results, let the user know and provide general guidance.",
      "kind": "request"
    },
    {
      "parts": [
        {
          "content": "To create a custom analyzer in Elasticsearch for the Hungarian language, you can utilize the built-in `hungarian` analyzer and adapt it to fit your specific requirements. Below is an example configuration for a custom analyzer named `rebuilt_hungarian`.\n\n### Example Configuration\n\n```json\nPUT /hungarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hungarian_stop\": {\n          \"type\": \"stop\",\n          \"stopwords\": \"_hungarian_\"\n        },\n        \"hungarian_keywords\": {\n          \"type\": \"keyword_marker\",\n          \"keywords\": [\"p\u00e9lda\"]  // List of keywords that shouldn't be altered during analysis\n        },\n        \"hungarian_stemmer\": {\n          \"type\": \"stemmer\",\n          \"language\": \"hungarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hungarian\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",               // Converts all characters to lowercase\n            \"hungarian_stop\",          // Applies the Hungarian stop filter\n            \"hungarian_keywords\",      // Applies keyword marking\n            \"hungarian_stemmer\"       // Applies the Hungarian stemmer\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n### Explanation of the Components\n\n1. **Tokenizer**:\n   - The `standard` tokenizer is used to break text into terms based on standard tokenization rules.\n\n2. **Filters**:\n   - `lowercase`: Converts all characters to lowercase.\n   - `hungarian_stop`: Uses a predefined list of Hungarian stop words to filter out less meaningful words (e.g., \"a\", \"az\").\n   - `hungarian_keywords`: Allows you to define keywords that should not be altered by stemming.\n   - `hungarian_stemmer`: Implements stemming rules tailored for the Hungarian language.\n\n### Usage\nOnce you create this analyzer, you can apply it to your index and analyze texts in Hungarian with improved capability tailored to that language.\n\nYou can refer to the official documentation for more details about language analyzers and how to customize them: [Hungarian Analyzer Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html) [source](https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md).",
          "id": null,
          "part_kind": "text"
        }
      ],
      "usage": {
        "input_tokens": 14908,
        "cache_write_tokens": 0,
        "cache_read_tokens": 0,
        "output_tokens": 485,
        "input_audio_tokens": 0,
        "cache_audio_read_tokens": 0,
        "output_audio_tokens": 0,
        "details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 0,
          "rejected_prediction_tokens": 0
        }
      },
      "model_name": "gpt-4o-mini-2024-07-18",
      "timestamp": "2025-10-03T06:06:36+00:00",
      "kind": "response",
      "provider_name": "openai",
      "provider_details": {
        "finish_reason": "stop"
      },
      "provider_response_id": "chatcmpl-CMTE4uJ0zblglHfXiETymSzJ0pid0",
      "finish_reason": "stop"
    }
  ],
  "source": "ai-generated"
}
{
  "agent_name": "es_agent_v2",
  "system_prompt": "You are a helpful assistant that answers questions about documentation.  \n\nUse the search tool to find relevant information from the repository before answering questions.  \n\nIf you can find specific information through search, use it to provide accurate answers.\n\nAlways include references by citing the filename of the source material you used.\nReplace it with the full path to the GitHub repository:\n\"https://github.com/elastic/elasticsearch/blob/main/\"\nFormat: [LINK TITLE](FULL_GITHUB_LINK)\n\n\nIf the search doesn't return relevant results, let the user know and provide general guidance.",
  "provider": "openai",
  "model": "gpt-4o-mini",
  "tools": [
    "search"
  ],
  "messages": [
    {
      "parts": [
        {
          "content": "Can you explain the required parameters for the `geoshape` field in the ingest-circle-processor?",
          "timestamp": "2025-10-03T05:57:55.293177+00:00",
          "part_kind": "user-prompt"
        }
      ],
      "instructions": "You are a helpful assistant that answers questions about documentation.  \n\nUse the search tool to find relevant information from the repository before answering questions.  \n\nIf you can find specific information through search, use it to provide accurate answers.\n\nAlways include references by citing the filename of the source material you used.\nReplace it with the full path to the GitHub repository:\n\"https://github.com/elastic/elasticsearch/blob/main/\"\nFormat: [LINK TITLE](FULL_GITHUB_LINK)\n\n\nIf the search doesn't return relevant results, let the user know and provide general guidance.",
      "kind": "request"
    },
    {
      "parts": [
        {
          "tool_name": "search",
          "args": "{\"query\":\"ingest-circle-processor geoshape field parameters\"}",
          "tool_call_id": "call_5AHx4xfjTGiUsgMZlUIqBzu2",
          "part_kind": "tool-call"
        }
      ],
      "usage": {
        "input_tokens": 222,
        "cache_write_tokens": 0,
        "cache_read_tokens": 0,
        "output_tokens": 22,
        "input_audio_tokens": 0,
        "cache_audio_read_tokens": 0,
        "output_audio_tokens": 0,
        "details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 0,
          "rejected_prediction_tokens": 0
        }
      },
      "model_name": "gpt-4o-mini-2024-07-18",
      "timestamp": "2025-10-03T05:57:56+00:00",
      "kind": "response",
      "provider_name": "openai",
      "provider_details": {
        "finish_reason": "tool_calls"
      },
      "provider_response_id": "chatcmpl-CMT5gicyudRgllFBZX8Vs6fXTgDOQ",
      "finish_reason": "tool_call"
    },
    {
      "parts": [
        {
          "tool_name": "search",
          "content": [
            {
              "navigation_title": "Circle",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html"
              ],
              "content": "# Circle processor [ingest-circle-processor]\n\n\nConverts circle definitions of shapes to regular polygons which approximate them.\n\n$$$circle-processor-options$$$\n\n| Name | Required | Default | Description |\n| --- | --- | --- | --- |\n| `field` | yes | - | The field to interpret as a circle. Either a string in WKT format or a map for GeoJSON. |\n| `target_field` | no | `field` | The field to assign the polygon shape to, by default `field` is updated in-place |\n| `ignore_missing` | no | `false` | If `true` and `field` does not exist, the processor quietly exits without modifying the document |\n| `error_distance` | yes | - | The difference between the resulting inscribed distance from center to side and the circle\u2019s radius (measured in meters for `geo_shape`, unit-less for `shape`) |\n| `shape_type` | yes | - | Which field mapping type is to be used when processing the circle: `geo_shape` or `shape` |\n| `description` | no | - | Description of the processor. Useful for describing the purpose of the processor or its configuration. |\n| `if` | no | - | Conditionally execute the processor. See [Conditionally run a processor](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#conditionally-run-processor). |\n| `ignore_failure` | no | `false` | Ignore failures for the processor. See [Handling pipeline failures](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#handling-pipeline-failures). |\n| `on_failure` | no | - | Handle failures for the processor. See [Handling pipeline failures](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#handling-pipeline-failures). |\n| `tag` | no | - | Identifier for the processor. Useful for debugging and metrics. |\n\n![error distance](images/error_distance.png \"\")\n\n```console\nPUT circles\n{\n  \"mappings\": {\n    \"properties\": {\n      \"circle\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPUT _ingest/pipeline/polygonize_circles\n{\n  \"description\": \"translate circle to polygon\",\n  \"processors\": [\n    {\n      \"circle\": {\n        \"field\": \"circle\",\n        \"error_distance\": 28.0,\n        \"shape_type\": \"geo_shape\"\n      }\n    }\n  ]\n}\n```\n\nUsing the above pipeline, we can attempt to index a document into the `circles` index. The circle can be represented as either a WKT circle or a GeoJSON circle. The resulting polygon will be represented and indexed using the same format as the input circle. WKT will be translated to a WKT polygon, and GeoJSON circles will be translated to GeoJSON polygons.\n\n::::{important}\nCircles that contain a pole are not supported.\n::::\n\n\n## Example: Circle defined in Well Known Text [_example_circle_defined_in_well_known_text]\n\nIn this example a circle defined in WKT format is indexed\n\n```console\nPUT circles/_doc/1?pipeline=polygonize_circles\n{\n  \"circle\": \"CIRCLE (30 10 40)\"\n}\n\nGET circles/_doc/1\n```\n\nThe response from the above index request:\n\n```console-result\n{\n  \"found\": true,\n  \"_index\": \"circles\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"circle\": \"POLYGON ((30.000365257263184 10.0, 30.000111397193788 10.00034284530941, 29.999706043744222 10.000213571721195, 29.999706043744222 9.999786428278805, 30.000111397193788 9.99965715469059, 30.000365257263184 10.0))\"\n  }\n}\n```\n\n\n## Example: Circle defined in GeoJSON [_example_circle_defined_in_geojson]\n\nIn this example a circle defined in GeoJSON format is indexed\n\n```console\nPUT circles/_doc/2?pipeline=polygonize_circles\n{\n  \"circle\": {\n    \"type\": \"circle\",\n    \"radius\": \"40m\",\n    \"coordinates\": [30, 10]\n  }\n}\n\nGET circles/_doc/2\n```\n\nThe response from the above index request:\n\n```console-result\n{\n  \"found\": true,\n  \"_index\": \"circles\",\n  \"_id\": \"2\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"circle\": {\n      \"coordinates\": [\n        [\n          [30.000365257263184, 10.0],\n          [30.000111397193788, 10.00034284530941],\n          [29.999706043744222, 10.000213571721195],\n          [29.999706043744222, 9.999786428278805],\n          [30.000111397193788, 9.99965715469059],\n          [30.000365257263184, 10.0]\n        ]\n      ],\n      \"type\": \"Polygon\"\n    }\n  }\n}\n```\n\n\n## Notes on Accuracy [circle-processor-notes]\n\nAccuracy of the polygon that represents the circle is defined as `error_distance`. The smaller this difference is, the closer to a perfect circle the polygon is.\n\nBelow is a table that aims to help capture how the radius of the circle affects the resulting number of sides of the polygon given different inputs.\n\nThe minimum number of sides is `4` and the maximum is `1000`.\n\n$$$circle-processor-accuracy$$$\n\n| error_distance | radius in meters | number of sides of polygon |\n| --- | --- | --- |\n| 1.00 | 1.0 | 4 |\n| 1.00 | 10.0 | 14 |\n| 1.00 | 100.0 | 45 |\n| 1.00 | 1000.0 | 141 |\n| 1.00 | 10000.0 | 445 |\n| 1.00 | 100000.0 | 1000 |",
              "filename": "elasticsearch-main/docs/reference/enrich-processor/ingest-circle-processor.md"
            },
            {
              "navigation_title": "Geoshape",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html"
              ],
              "content": "# Geoshape field type [geo-shape]\n\n\nThe `geo_shape` data type facilitates the indexing of and searching with arbitrary geoshapes such as rectangles, lines and polygons. If the data being indexed contains shapes other than just points, it is necessary to use this mapping. If the data contains only points, it can be indexed as either [`geo_point`](/reference/elasticsearch/mapping-reference/geo-point.md) or `geo_shape`.\n\nDocuments using this type can be used:\n\n* to find geoshapes within:\n\n    * a [bounding box](/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md)\n    * a certain [distance](/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md) of a central point\n    * a [`geo_shape` query](/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md) (for example, intersecting polygons).\n\n* to aggregate documents by geographic grids:\n\n    * either [`geo_hash`](/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md)\n    * or [`geo_tile`](/reference/aggregations/search-aggregations-bucket-geotilegrid-aggregation.md)\n    * or [`geo_hex`](/reference/aggregations/search-aggregations-bucket-geohexgrid-aggregation.md)\n\n\n\n### Mapping Options [geo-shape-mapping-options]\n\nThe `geo_shape` mapping maps GeoJSON or WKT geometry objects to the `geo_shape` type. To enable it, users must explicitly map fields to the `geo_shape` type.\n\n::::{note}\nIn [GeoJSON](https://datatracker.ietf.org/doc/html/rfc7946) and [WKT](https://www.ogc.org/standard/sfa/), and therefore Elasticsearch, the correct **coordinate order is longitude, latitude (X, Y)** within coordinate arrays. This differs from many Geospatial APIs (e.g., Google Maps) that generally use the colloquial latitude, longitude (Y, X).\n\n::::\n\n\n| Option | Description | Default |\n| --- | --- | --- |\n| `orientation` | Optional. Default [orientation](#polygon-orientation) for the field\u2019s WKT polygons.<br><br>This parameter sets and returns only a `RIGHT` (counterclockwise) or `LEFT` (clockwise) value. However, you can specify either value in multiple ways.<br><br>To set `RIGHT`, use one of the following arguments or its uppercase variant:<br><br>* `right`<br>* `counterclockwise`<br>* `ccw`<br><br>To set `LEFT`, use one of the following arguments or its uppercase variant:<br><br>* `left`<br>* `clockwise`<br>* `cw`<br> | `RIGHT` |\n| `ignore_malformed` | If true, malformed GeoJSON or WKT shapes are ignored. Iffalse (default), malformed GeoJSON and WKT shapes throw an exception and reject theentire document. | `false` |\n| `ignore_z_value` | If `true` (default) three dimension points will be accepted (stored in source)but only latitude and longitude values will be indexed; the third dimension is ignored. If `false`,geopoints containing any more than latitude and longitude (two dimensions) values throw an exceptionand reject the whole document. | `true` |\n| `coerce` | If `true` unclosed linear rings in polygons will be automatically closed. | `false` |\n| `index` | Should the field be quickly searchable? Accepts `true` (default) and `false`.Fields that only have [`doc_values`](/reference/elasticsearch/mapping-reference/doc-values.md) enabled can still be queried, albeit slower. | `true` |\n| `doc_values` | Should the field be stored on disk in a column-stride fashion,so that it can later be used for aggregations or scripting? | `true` |\n\n\n### Indexing approach [geoshape-indexing-approach]\n\nGeoshape types are indexed by decomposing the shape into a triangular mesh and indexing each triangle as a 7 dimension point in a BKD tree. This provides near perfect spatial resolution (down to 1e-7 decimal degree precision) since all spatial relations are computed using an encoded vector representation of the original shape. Performance of the tessellator primarily depends on the number of vertices that define the polygon/multi-polygon.\n\n\n#### Example [_example]\n\n```console\nPUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n```\n\n\n### Input Structure [input-structure]\n\nShapes can be represented using either the [GeoJSON](http://geojson.org) or [Well-Known Text](https://docs.opengeospatial.org/is/12-063r5/12-063r5.html) (WKT) format. The following table provides a mapping of GeoJSON and WKT to Elasticsearch types:\n\n| GeoJSON Type | WKT Type | Elasticsearch Type | Description |\n| --- | --- | --- | --- |\n| `Point` | `POINT` | `point` | A single geographic coordinate. Note: Elasticsearch uses WGS-84 coordinates only. |\n| `LineString` | `LINESTRING` | `linestring` | An arbitrary line given two or more points. |\n| `Polygon` | `POLYGON` | `polygon` | A *closed* polygon whose first and last pointmust match, thus requiring `n + 1` vertices to create an `n`-sidedpolygon and a minimum of `4` vertices. |\n| `MultiPoint` | `MULTIPOINT` | `multipoint` | An array of unconnected, but likely relatedpoints. |\n| `MultiLineString` | `MULTILINESTRING` | `multilinestring` | An array of separate linestrings. |\n| `MultiPolygon` | `MULTIPOLYGON` | `multipolygon` | An array of separate polygons. |\n| `GeometryCollection` | `GEOMETRYCOLLECTION` | `geometrycollection` | A GeoJSON shape similar to the`multi*` shapes except that multiple types can coexist (e.g., a Pointand a LineString). |\n| `N/A` | `BBOX` | `envelope` | A bounding rectangle, or envelope, specified byspecifying only the top left and bottom right points. |\n\n::::{note}\nFor all types, both the inner `type` and `coordinates` fields are required.\n\n::::\n\n\n\n#### [Point](http://geojson.org/geojson-spec.html#id2) [geo-point-type]\n\nA point is a single geographic coordinate, such as the location of a building or the current position given by a smartphone\u2019s Geolocation API. The following is an example of a point in GeoJSON.\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Point\",\n    \"coordinates\" : [-77.03653, 38.897676]\n  }\n}\n```\n\nThe following is an example of a point in WKT:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"POINT (-77.03653 38.897676)\"\n}\n```\n\n\n#### [LineString](http://geojson.org/geojson-spec.html#id3) [geo-linestring]\n\nA linestring defined by an array of two or more positions. By specifying only two points, the linestring will represent a straight line. Specifying more than two points creates an arbitrary path. The following is an example of a linestring in GeoJSON.\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"LineString\",\n    \"coordinates\" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]\n  }\n}\n```\n\nThe following is an example of a linestring in WKT:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"LINESTRING (-77.03653 38.897676, -77.009051 38.889939)\"\n}\n```\n\nThe above linestring would draw a straight line starting at the White House to the US Capitol Building.\n\n\n#### [Polygon](http://geojson.org/geojson-spec.html#id4) [geo-polygon]\n\nA polygon is defined by a list of a list of points. The first and last points in each (outer) list must be the same (the polygon must be closed). The following is an example of a polygon in GeoJSON.\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Polygon\",\n    \"coordinates\" : [\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]\n    ]\n  }\n}\n```\n\nThe following is an example of a polygon in WKT:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))\"\n}\n```\n\nThe first array represents the outer boundary of the polygon, the other arrays represent the interior shapes (\"holes\"). The following is a GeoJSON example of a polygon with a hole:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Polygon\",\n    \"coordinates\" : [\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],\n      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]\n    ]\n  }\n}\n```\n\nThe following is an example of a polygon with a hole in WKT:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))\"\n}\n```\n\n\n#### Polygon orientation [polygon-orientation]\n\nA polygon\u2019s orientation indicates the order of its vertices: `RIGHT` (counterclockwise) or `LEFT` (clockwise). {{es}} uses a polygon\u2019s orientation to determine if it crosses the international dateline (+/-180\u00b0 longitude).\n\nYou can set a default orientation for WKT polygons using the [`orientation` mapping parameter](#geo-shape-mapping-options). This is because the WKT specification doesn\u2019t specify or enforce a default orientation.\n\nGeoJSON polygons use a default orientation of `RIGHT`, regardless of `orientation` mapping parameter\u2019s value. This is because the [GeoJSON specification](https://tools.ietf.org/html/rfc7946#section-3.1.6) mandates that an outer polygon use a counterclockwise orientation and interior shapes use a clockwise orientation.\n\nYou can override the default orientation for GeoJSON polygons using the document-level `orientation` parameter. For example, the following indexing request specifies a document-level `orientation` of `LEFT`.\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Polygon\",\n    \"orientation\" : \"LEFT\",\n    \"coordinates\" : [\n      [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ]\n    ]\n  }\n}\n```\n\n{{es}} only uses a polygon\u2019s orientation to determine if it crosses the international dateline. If the difference between a polygon\u2019s minimum longitude and the maximum longitude is less than 180\u00b0, the polygon doesn\u2019t cross the dateline and its orientation has no effect.\n\nIf the difference between a polygon\u2019s minimum longitude and the maximum longitude is 180\u00b0 or greater, {{es}} checks whether the polygon\u2019s document-level `orientation` differs from the default orientation. If the orientation differs, {{es}} considers the polygon to cross the international dateline and splits the polygon at the dateline.\n\n\n#### [MultiPoint](http://geojson.org/geojson-spec.html#id5) [geo-multipoint]\n\nThe following is an example of a list of GeoJSON points:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"MultiPoint\",\n    \"coordinates\" : [\n      [102.0, 2.0], [103.0, 2.0]\n    ]\n  }\n}\n```\n\nThe following is an example of a list of WKT points:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"MULTIPOINT (102.0 2.0, 103.0 2.0)\"\n}\n```\n\n\n#### [MultiLineString](http://geojson.org/geojson-spec.html#id6) [geo-multilinestring]\n\nThe following is an example of a list of GeoJSON linestrings:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"MultiLineString\",\n    \"coordinates\" : [\n      [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],\n      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]\n    ]\n  }\n}\n```\n\nThe following is an example of a list of WKT linestrings:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))\"\n}\n```\n\n\n#### [MultiPolygon](http://geojson.org/geojson-spec.html#id7) [geo-multipolygon]\n\nThe following is an example of a list of GeoJSON polygons (second polygon contains a hole):\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"MultiPolygon\",\n    \"coordinates\" : [\n      [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],\n      [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n        [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]\n    ]\n  }\n}\n```\n\nThe following is an example of a list of WKT polygons (second polygon contains a hole):\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))\"\n}\n```\n\n\n#### [Geometry Collection](http://geojson.org/geojson-spec.md#geometrycollection) [geo-geometry_collection]\n\nThe following is an example of a collection of GeoJSON geometry objects:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\": \"GeometryCollection\",\n    \"geometries\": [\n      {\n        \"type\": \"Point\",\n        \"coordinates\": [100.0, 0.0]\n      },\n      {\n        \"type\": \"LineString\",\n        \"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ]\n      }\n    ]\n  }\n}\n```\n\nThe following is an example of a collection of WKT geometry objects:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))\"\n}\n```\n\n\n#### Envelope [_envelope]\n\nElasticsearch supports an `envelope` type, which consists of coordinates for upper left and lower right points of the shape to represent a bounding rectangle in the format `[[minLon, maxLat], [maxLon, minLat]]`:\n\n```console\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"envelope\",\n    \"coordinates\" : [ [100.0, 1.0], [101.0, 0.0] ]\n  }\n}\n```\n\nThe following is an example of an envelope using the WKT BBOX format:\n\n**NOTE:** WKT specification expects the following order: minLon, maxLon, maxLat, minLat.\n\n```console\nPOST /example/_doc\n{\n  \"location\" : \"BBOX (100.0, 102.0, 2.0, 0.0)\"\n}\n```\n\n\n#### Circle [_circle]\n\nNeither GeoJSON nor WKT supports a point-radius circle type. Instead, use a [circle ingest processor](/reference/enrich-processor/ingest-circle-processor.md) to approximate the circle as a [`polygon`](#geo-polygon).\n\n\n### Sorting and Retrieving index Shapes [_sorting_and_retrieving_index_shapes]\n\nDue to the complex input structure and index representation of shapes, it is not currently possible to sort shapes or retrieve their fields directly. The `geo_shape` value is only retrievable through the `_source` field.",
              "filename": "elasticsearch-main/docs/reference/elasticsearch/mapping-reference/geo-shape.md"
            },
            {
              "content": "% This is generated by ESQL's AbstractFunctionTestCase. Do not edit it. See ../README.md for how to regenerate it.\n\n### ST GEOHASH\nCalculates the `geohash` of the supplied geo_point at the specified precision.\nThe result is long encoded. Use [TO_STRING](#esql-to_string) to convert the result to a string,\n[TO_LONG](#esql-to_long) to convert it to a `long`, or [TO_GEOSHAPE](#esql-to_geoshape) to calculate\nthe `geo_shape` bounding geometry.\n\nThese functions are related to the [`geo_grid` query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query)\nand the [`geohash_grid` aggregation](https://www.elastic.co/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation).\n\n```esql\nFROM airports\n| EVAL geohash = ST_GEOHASH(location, 1)\n| STATS\n    count = COUNT(geohash),\n    centroid = ST_CENTROID_AGG(location)\n      BY geohash\n| WHERE count >= 10\n| EVAL geohashString = TO_STRING(geohash)\n| KEEP count, centroid, geohashString\n| SORT count DESC, geohashString ASC\n```",
              "filename": "elasticsearch-main/docs/reference/query-languages/esql/kibana/docs/functions/st_geohash.md"
            },
            {
              "navigation_title": "Geoshape",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-shape-query.html"
              ],
              "content": "# Geoshape query [query-dsl-geo-shape-query]\n\n\nFilter documents indexed using either the [`geo_shape`](/reference/elasticsearch/mapping-reference/geo-shape.md) or the [`geo_point`](/reference/elasticsearch/mapping-reference/geo-point.md) type.\n\nThe `geo_shape` query uses the same [index](/reference/elasticsearch/mapping-reference/geo-shape.md#geoshape-indexing-approach) as the `geo_shape` or `geo_point` mapping to find documents that have a shape that is related to the query shape, using a specified [spatial relationship](#geo-shape-spatial-relations): either intersects, contained, within or disjoint.\n\nThe query supports two ways of defining the query shape, either by providing a whole shape definition, or by referencing the name of a shape pre-indexed in another index. Both formats are defined below with examples.\n\n## Inline shape definition [_inline_shape_definition]\n\nSimilar to the `geo_point` type, the `geo_shape` query uses [GeoJSON](http://geojson.org) to represent shapes.\n\nGiven the following index with locations as `geo_shape` fields:\n\n```console\nPUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPOST /example/_doc?refresh\n{\n  \"name\": \"Wind & Wetter, Berlin, Germany\",\n  \"location\": {\n    \"type\": \"point\",\n    \"coordinates\": [ 13.400544, 52.530286 ]\n  }\n}\n```\n\nThe following query will find the point using {{es}}'s `envelope` GeoJSON extension:\n\n```console\nGET /example/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"geo_shape\": {\n          \"location\": {\n            \"shape\": {\n              \"type\": \"envelope\",\n              \"coordinates\": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]\n            },\n            \"relation\": \"within\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nThe above query can, similarly, be queried on `geo_point` fields.\n\n```console\nPUT /example_points\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n\nPUT /example_points/_doc/1?refresh\n{\n  \"name\": \"Wind & Wetter, Berlin, Germany\",\n  \"location\": [13.400544, 52.530286]\n}\n```\n\nUsing the same query, the documents with matching `geo_point` fields are returned.\n\n```console\nGET /example_points/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"geo_shape\": {\n          \"location\": {\n            \"shape\": {\n              \"type\": \"envelope\",\n              \"coordinates\": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]\n            },\n            \"relation\": \"intersects\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n```console-result\n{\n  \"took\" : 17,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"example_points\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"name\": \"Wind & Wetter, Berlin, Germany\",\n          \"location\": [13.400544, 52.530286]\n        }\n      }\n    ]\n  }\n}\n```\n\n\n## Pre-indexed shape [_pre_indexed_shape]\n\nThe query also supports using a shape which has already been indexed in another index. This is particularly useful for when you have a pre-defined list of shapes and you want to reference the list using a logical name (for example *New Zealand*) rather than having to provide coordinates each time. In this situation, it is only necessary to provide:\n\n* `id` - The ID of the document that containing the pre-indexed shape.\n* `index` - Name of the index where the pre-indexed shape is. Defaults to *shapes*.\n* `path` - The field specified as path containing the pre-indexed shape. Defaults to *shape*.\n* `routing` - The routing of the shape document if required.\n\nThe following is an example of using the Filter with a pre-indexed shape:\n\n```console\nPUT /shapes\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPUT /shapes/_doc/deu\n{\n  \"location\": {\n    \"type\": \"envelope\",\n    \"coordinates\" : [[13.0, 53.0], [14.0, 52.0]]\n  }\n}\n\nGET /example/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"geo_shape\": {\n          \"location\": {\n            \"indexed_shape\": {\n              \"index\": \"shapes\",\n              \"id\": \"deu\",\n              \"path\": \"location\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n\n## Spatial relations [geo-shape-spatial-relations]\n\nThe following is a complete list of spatial relation operators available when searching a geo field:\n\n* `INTERSECTS` - (default) Return all documents whose `geo_shape` or `geo_point` field intersects the query geometry.\n* `DISJOINT` - Return all documents whose `geo_shape` or `geo_point` field has nothing in common with the query geometry.\n* `WITHIN` - Return all documents whose `geo_shape` or `geo_point` field is within the query geometry. Line geometries are not supported.\n* `CONTAINS` - Return all documents whose `geo_shape` or `geo_point` field contains the query geometry.\n\n\n### Ignore unmapped [_ignore_unmapped_4]\n\nWhen set to `true` the `ignore_unmapped` option will ignore an unmapped field and will not match any documents for this query. This can be useful when querying multiple indexes which might have different mappings. When set to `false` (the default value) the query will throw an exception if the field is not mapped.\n\n\n## Notes [geo-shape-query-notes]\n\n* When data is indexed in a `geo_shape` field as an array of shapes, the arrays are treated as one shape. For this reason, the following requests are equivalent.\n\n```console\nPUT /test/_doc/1\n{\n  \"location\": [\n    {\n      \"coordinates\": [46.25,20.14],\n      \"type\": \"point\"\n    },\n    {\n      \"coordinates\": [47.49,19.04],\n      \"type\": \"point\"\n    }\n  ]\n}\n```\n\n```console\nPUT /test/_doc/1\n{\n  \"location\":\n    {\n      \"coordinates\": [[46.25,20.14],[47.49,19.04]],\n      \"type\": \"multipoint\"\n    }\n}\n```\n\n* The `geo_shape` query assumes `geo_shape` fields use a default `orientation` of `RIGHT` (counterclockwise). See [Polygon orientation](/reference/elasticsearch/mapping-reference/geo-shape.md#polygon-orientation).",
              "filename": "elasticsearch-main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md"
            },
            {
              "navigation_title": "Edge n-gram",
              "mapped_pages": [
                "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenfilter.html"
              ],
              "content": "# Edge n-gram token filter [analysis-edgengram-tokenfilter]\n\n\nForms an [n-gram](https://en.wikipedia.org/wiki/N-gram) of a specified length from the beginning of a token.\n\nFor example, you can use the `edge_ngram` token filter to change `quick` to `qu`.\n\nWhen not customized, the filter creates 1-character edge n-grams by default.\n\nThis filter uses Lucene\u2019s [EdgeNGramTokenFilter](https://lucene.apache.org/core/10_0_0/analysis/common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.md).\n\n::::{note}\nThe `edge_ngram` filter is similar to the [`ngram` token filter](/reference/text-analysis/analysis-ngram-tokenizer.md). However, the `edge_ngram` only outputs n-grams that start at the beginning of a token. These edge n-grams are useful for [search-as-you-type](/reference/elasticsearch/mapping-reference/search-as-you-type.md) queries.\n\n::::\n\n\n## Example [analysis-edgengram-tokenfilter-analyze-ex]\n\nThe following [analyze API](https://www.elastic.co/docs/api/doc/elasticsearch/operation/operation-indices-analyze) request uses the `edge_ngram` filter to convert `the quick brown fox jumps` to 1-character and 2-character edge n-grams:\n\n```console\nGET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    { \"type\": \"edge_ngram\",\n      \"min_gram\": 1,\n      \"max_gram\": 2\n    }\n  ],\n  \"text\": \"the quick brown fox jumps\"\n}\n```\n\nThe filter produces the following tokens:\n\n```text\n[ t, th, q, qu, b, br, f, fo, j, ju ]\n```\n\n\n## Add to an analyzer [analysis-edgengram-tokenfilter-analyzer-ex]\n\nThe following [create index API](https://www.elastic.co/docs/api/doc/elasticsearch/operation/operation-indices-create) request uses the `edge_ngram` filter to configure a new [custom analyzer](docs-content://manage-data/data-store/text-analysis/create-custom-analyzer.md).\n\n```console\nPUT edge_ngram_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_edge_ngram\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"edge_ngram\" ]\n        }\n      }\n    }\n  }\n}\n```\n\n\n## Configurable parameters [analysis-edgengram-tokenfilter-configure-parms]\n\n`max_gram`\n:   (Optional, integer) Maximum character length of a gram. For custom token filters, defaults to `2`. For the built-in `edge_ngram` filter, defaults to `1`.\n\nSee [Limitations of the `max_gram` parameter](#analysis-edgengram-tokenfilter-max-gram-limits).\n\n\n`min_gram`\n:   (Optional, integer) Minimum character length of a gram. Defaults to `1`.\n\n`preserve_original`\n:   (Optional, Boolean) Emits original token when set to `true`. Defaults to `false`.\n\n`side`\n:   :::{admonition} Deprecated in 8.16.0\n    This setting was deprecated in 8.16.0.\n    :::\n\n    (Optional, string) Indicates whether to truncate tokens from the `front` or `back`. Defaults to `front`.\n\n## Customize [analysis-edgengram-tokenfilter-customize]\n\nTo customize the `edge_ngram` filter, duplicate it to create the basis for a new custom token filter. You can modify the filter using its configurable parameters.\n\nFor example, the following request creates a custom `edge_ngram` filter that forms n-grams between 3-5 characters.\n\n```console\nPUT edge_ngram_custom_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"3_5_edgegrams\" ]\n        }\n      },\n      \"filter\": {\n        \"3_5_edgegrams\": {\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 3,\n          \"max_gram\": 5\n        }\n      }\n    }\n  }\n}\n```\n\n\n## Limitations of the `max_gram` parameter [analysis-edgengram-tokenfilter-max-gram-limits]\n\nThe `edge_ngram` filter\u2019s `max_gram` value limits the character length of tokens. When the `edge_ngram` filter is used with an index analyzer, this means search terms longer than the `max_gram` length may not match any indexed terms.\n\nFor example, if the `max_gram` is `3`, searches for `apple` won\u2019t match the indexed term `app`.\n\nTo account for this, you can use the [`truncate`](/reference/text-analysis/analysis-truncate-tokenfilter.md) filter with a search analyzer to shorten search terms to the `max_gram` character length. However, this could return irrelevant results.\n\nFor example, if the `max_gram` is `3` and search terms are truncated to three characters, the search term `apple` is shortened to `app`. This means searches for `apple` return any indexed terms matching `app`, such as `apply`, `snapped`, and `apple`.\n\nWe recommend testing both approaches to see which best fits your use case and desired search experience.",
              "filename": "elasticsearch-main/docs/reference/text-analysis/analysis-edgengram-tokenfilter.md"
            }
          ],
          "tool_call_id": "call_5AHx4xfjTGiUsgMZlUIqBzu2",
          "metadata": null,
          "timestamp": "2025-10-03T05:57:59.095131+00:00",
          "part_kind": "tool-return"
        }
      ],
      "instructions": "You are a helpful assistant that answers questions about documentation.  \n\nUse the search tool to find relevant information from the repository before answering questions.  \n\nIf you can find specific information through search, use it to provide accurate answers.\n\nAlways include references by citing the filename of the source material you used.\nReplace it with the full path to the GitHub repository:\n\"https://github.com/elastic/elasticsearch/blob/main/\"\nFormat: [LINK TITLE](FULL_GITHUB_LINK)\n\n\nIf the search doesn't return relevant results, let the user know and provide general guidance.",
      "kind": "request"
    },
    {
      "parts": [
        {
          "content": "The `geoshape` field in the `ingest-circle-processor` requires the following parameters:\n\n1. **field** (required):\n   - Description: This is the field that contains the circle definition, which can be either a string in Well-Known Text (WKT) format or a map in GeoJSON format.\n\n2. **error_distance** (required):\n   - Description: This defines the acceptable difference between the actual inscribed distance from the center of the circle to the side of the shape and the circle's radius. This value is represented in meters for `geo_shape` and is unitless for `shape`. \n\n3. **shape_type** (required):\n   - Description: Specifies the field mapping type to be used when processing the circle. It can either be `geo_shape` or `shape`.\n\n4. **target_field** (optional):\n   - Default: The same as `field` (updates in-place).\n   - Description: This field will assign the resulting polygon shape. If not set, the original `field` will be updated.\n\n5. **ignore_missing** (optional):\n   - Default: `false`\n   - Description: If set to `true`, the processor will exit quietly without modifying the document if the specified `field` does not exist.\n\n6. **description** (optional):\n   - Description: Allows you to provide a description of the processor.\n\n7. **if** (optional):\n   - Description: Used for conditionally executing the processor.\n\n8. **ignore_failure** (optional):\n   - Default: `false`\n   - Description: If set to `true`, it will ignore failures from this processor.\n\n9. **on_failure** (optional):\n   - Description: Allows you to handle failures that occur in the processor.\n\n10. **tag** (optional):\n    - Description: An identifier for the processor, useful for debugging and metrics tracking.\n\nThese parameters allow the `ingest-circle-processor` to accurately convert circle definitions into polygon representations for geospatial data.\n\nFor detailed information, you can refer to the [Circle Processor documentation](https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-circle-processor.md) used as a reference.",
          "id": null,
          "part_kind": "text"
        }
      ],
      "usage": {
        "input_tokens": 10041,
        "cache_write_tokens": 0,
        "cache_read_tokens": 0,
        "output_tokens": 455,
        "input_audio_tokens": 0,
        "cache_audio_read_tokens": 0,
        "output_audio_tokens": 0,
        "details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 0,
          "rejected_prediction_tokens": 0
        }
      },
      "model_name": "gpt-4o-mini-2024-07-18",
      "timestamp": "2025-10-03T05:57:59+00:00",
      "kind": "response",
      "provider_name": "openai",
      "provider_details": {
        "finish_reason": "stop"
      },
      "provider_response_id": "chatcmpl-CMT5jj5fPRgctH0Grz7Q1QQ6u5NbG",
      "finish_reason": "stop"
    }
  ],
  "source": "ai-generated"
}